apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'jetty'

repositories {
    mavenCentral()
}

dependencies {

    testCompile 'junit:junit:4.11'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'com.sun.jersey:jersey-client:1.17.1'

    compile 'com.sun.jersey:jersey-core:1.17.1'
    compile 'com.sun.jersey:jersey-server:1.17.1'

    // required for running web app as servlet
    compile 'com.sun.jersey:jersey-servlet:1.17.1'

    // required for JSON request and responses
    compile "com.sun.jersey:jersey-json:1.9.1"

    // required for interceptors and filters.
    compile 'com.sun.jersey.contribs:jersey-contribs:1.19'

    // required for using handlebars templates in responses
    compile 'com.github.jknack:handlebars.java:4.0.4'
}

test {
    exclude '**/*IntegrationTest*'
}

task integrationTest(type: Test, dependsOn: "test") {

    dependsOn "jettyRun"
    finalizedBy "jettyStop"

    include '**/IntegrationTest/**'
}

// port & root path for integration tests
[jettyRun, jettyRunWar]*.httpPort = 8080
[jettyRun, jettyRunWar]*.contextPath = '/'

// other jetty settings
[jettyRun, jettyRunWar]*.daemon = true
[jettyRun, jettyRunWar, jettyStop]*.stopPort = 8081
[jettyRun, jettyRunWar, jettyStop]*.stopKey = 'stop'

// workaround for jettyStop when using gradle daemon
import org.gradle.api.plugins.jetty.internal.Monitor
[jettyRun, jettyRunWar]*.doLast {
    /**
     * THIS IS A WORKAROUND! THE CURRENT VERSION OF THIS TASK DOESN'T START A WATCHER IN DAEMON MODE
     *
     * If starting the monitor fails, it may be because the jetty task was updated to fix this issue
     * When that happens, we shouldn't need the custom task any more
     *
     * Copied From: AbstractJettyRunTask
     *
     * https://issues.gradle.org/browse/GRADLE-2263
     */
    if (getStopPort() != null && getStopPort() > 0 && getStopKey() != null) {
        Monitor monitor = new Monitor(getStopPort(), getStopKey(), server.getProxiedObject());
        monitor.start();
    }
}